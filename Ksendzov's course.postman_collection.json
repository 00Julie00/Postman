{
	"info": {
		"_postman_id": "c30b857b-04d4-421f-aec9-cb3bae0dc6d8",
		"name": "Ksendzov's course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23353190",
		"_collection_link": "https://galactic-sunset-34222.postman.co/workspace/Julie-workspace~44a3e49e-3620-437d-8842-3e748d5120e3/collection/23353190-c30b857b-04d4-421f-aec9-cb3bae0dc6d8?action=share&source=collection_link&creator=23353190"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "user_info_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Lesha",
									"type": "text"
								},
								{
									"key": "age",
									"value": "44",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Vadim",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_method",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5007/get_method?name=Julia&age=39",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5007",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Julia"
								},
								{
									"key": "age",
									"value": "39"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Julia&age=39&weight=58",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Julia"
								},
								{
									"key": "age",
									"value": "39"
								},
								{
									"key": "weight",
									"value": "58"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Julia&age=39&salary=600",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Julia"
								},
								{
									"key": "age",
									"value": "39"
								},
								{
									"key": "salary",
									"value": "600"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Julia&age=39&salary=600",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Julia"
								},
								{
									"key": "age",
									"value": "39"
								},
								{
									"key": "salary",
									"value": "600"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Anna&age=36&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Anna"
								},
								{
									"key": "age",
									"value": "36"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The expected String comes to body\", function (){",
									"pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3_part1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.",
									"var jsonData=pm.response.json();",
									"",
									"//Проверить, что name в ответе равно name s request (name вбить руками.)",
									"pm.test(\"Check the name\",function() {",
									"    pm.expect(jsonData.name).to.eql(\"Vadim\");",
									"});",
									"",
									"//Проверить, что age в ответе равно age s request (age вбить руками.)",
									"pm.test(\"Check the age\",function() {",
									"    pm.expect(jsonData.age).to.eql('33');",
									"});",
									"",
									"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
									"pm.test(\"Check the salary\",function() {",
									"    pm.expect(jsonData.salary).to.eql(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Vadim",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3_part2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();",
									"//Спарсить request",
									"var req_body=request.data;",
									"",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)",
									"console.log(\"request name==\",req_body.name,typeof req_body.name);",
									"pm.test(\"check the name\",function(){",
									"    pm.expect(jsonData.name).to.eql(req_body.name)",
									"});",
									"",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)",
									"console.log(\"request age==\",req_body.age,typeof req_body.age);",
									"pm.test(\"check the age\",function(){",
									"    pm.expect(jsonData.age).to.eql(req_body.age)",
									"});",
									"",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
									"console.log(\"request salary == \",req_body.salary, typeof req_body.salary);",
									"pm.test(\"check the salary\", function() {",
									"    pm.expect(jsonData.salary).to.eql(Number(req_body.salary));",
									"});",
									"",
									"//Вывести в консоль параметр family из response",
									"console.log(\"family==\",jsonData.family);",
									"",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
									"var u_salary_1_5_year=jsonData.family.u_salary_1_5_year;",
									"console.log(\"response salary 1.5 year == \",u_salary_1_5_year);",
									"pm.test(\"check the salary 1.5 year\", function() {",
									"    pm.expect(+req_body.salary*4).to.eql(+jsonData.family.u_salary_1_5_year);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Vadim",
									"type": "text"
								},
								{
									"key": "age",
									"value": "33",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.",
									"var jsonData=pm.response.json();",
									"//Спарсить request",
									"var req_url=pm.request.url.query.toObject();",
									"",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)",
									"console.log(\"request name==\",req_url.name,typeof req_url.name);",
									"pm.test(\"check the name\",function(){",
									"    pm.expect(req_url.name).to.eql(jsonData.name);",
									"});",
									"",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)",
									"console.log(\"request age==\",req_url.age,typeof +req_url.age);",
									"pm.test(\"check the age\",function(){",
									"    pm.expect(req_url.age).to.eql(jsonData.age);",
									"});",
									"",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
									"console.log(\"request salary == \",req_url.salary, typeof +req_url.salary);",
									"pm.test(\"check the salary\", function() {",
									"    pm.expect(+req_url.salary).to.eql(+jsonData.salary);",
									"});",
									"",
									"//Вывести в консоль параметр family из response",
									"console.log(\"family==\",jsonData.family);",
									"",
									"//Проверить, что у параметра dog есть параметры name.",
									"console.log(\"response property name of dog == \",jsonData.family.pets.dog.name,typeof jsonData.family.pets.dog.name );",
									"pm.test(\"check the dog have property name\", function() {",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('name');",
									"});",
									"",
									"//Проверить, что у параметра dog есть параметры age.",
									"console.log(\"response property age of dog == \",jsonData.family.pets.dog.age,typeof  jsonData.family.pets.dog.age);",
									"pm.test(\"check the dog have property age\", function() {",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('age');",
									"});",
									"//Проверить, что параметр name имеет значение Luky.",
									"console.log(\"response name of dog == \",jsonData.family.pets.dog.name,typeof  jsonData.family.pets.dog.name);",
									"pm.test(\"check the dog have name Luky\", function() {",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
									"});",
									"//Проверить, что параметр age имеет значение 4.",
									"console.log(\"response age of dog == \",jsonData.family.pets.dog.age,typeof  +jsonData.family.pets.dog.age);",
									"pm.test(\"check the dog have age 4\", function() {",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Julia&age=39&salary=600",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Julia"
								},
								{
									"key": "age",
									"value": "39"
								},
								{
									"key": "salary",
									"value": "600"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Спарсить response body в json.",
									"var jsonData=pm.response.json();",
									"//Спарсить request",
									"var req_url=pm.request.url.query.toObject();",
									"",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)",
									"console.log(\"request name==\",req_url.name,typeof req_url.name);",
									"pm.test(\"check the name\",function(){",
									"    pm.expect(req_url.name).to.eql(jsonData.name);",
									"});",
									"",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)",
									"console.log(\"request age==\",req_url.age,typeof +req_url.age);",
									"pm.test(\"check the age\",function(){",
									"    pm.expect(Number(req_url.age)).to.eql(Number(jsonData.age));",
									"});",
									"",
									"//Вывести в консоль параметр salary из request.",
									"console.log(\"request salary==\",req_url.salary,typeof +req_url.salary);",
									"",
									"//Вывести в консоль параметр salary из response.",
									"console.log (\"response salary==\", jsonData.salary);",
									"",
									"//Вывести в консоль 0-й элемент параметра salary из response.",
									"console.log (\"response salary==\", jsonData.salary[0]);",
									"",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
									"console.log (\"response salary==\", jsonData.salary[1]);",
									"",
									"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
									"console.log (\"response salary==\", jsonData.salary[2]);",
									"",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
									"console.log (\"array salary==\", jsonData.salary[0], +req_url.salary);",
									"pm.test(\"check the 0 element of salary array = req salary\",function(){",
									"    pm.expect(jsonData.salary[0]).to.eql(+req_url.salary);",
									"});",
									"",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
									"console.log (\"array salary==\", jsonData.salary[1], +req_url.salary*2);",
									"pm.test(\"check the 1 element of salary array = salary*2\",function(){",
									"    pm.expect(+jsonData.salary[1]).to.eql(+req_url.salary*2);",
									"});",
									"",
									"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
									"console.log (\"array salary==\", jsonData.salary[2], +req_url.salary*3);",
									"pm.test(\"check the 2 element of salary array = salary*3\",function(){",
									"    pm.expect(+jsonData.salary[1]).to.eql(+req_url.salary*2);",
									"});",
									"",
									"//Создать в окружении переменную name",
									"pm.environment.get(\"name\");",
									"//Создать в окружении переменную age",
									"pm.environment.get(\"age\");",
									"//Создать в окружении переменную salary",
									"pm.environment.get(\"salary\");",
									"",
									"//Передать в окружение переменную name",
									"pm.environment.set(\"name\", \"Anna\");",
									"//Передать в окружение переменную age",
									"pm.environment.set(\"age\", \"35\");",
									"//Передать в окружение переменную salary",
									"pm.environment.set(\"salary\", \"1000\");",
									"",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
									"for (i in jsonData.salary) {",
									"    console.log(i, jsonData.salary[i]);",
									"};",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5006/object_info_4?name=Anna&age=36&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5006",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Anna"
								},
								{
									"key": "age",
									"value": "36"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Вставить параметр salary из окружения в request",
									"//Вставить параметр age из окружения в age",
									"//Вставить параметр name из окружения в name",
									"",
									"",
									"//Спарсить response body в json.",
									"var jsonData=pm.response.json();",
									"console.log(\"response ==\", jsonData);",
									"//Спарсить request.",
									"var req_body=request.data;",
									"console.log(\"request ==\", req_body);",
									"",
									"//Проверить, что json response имеет параметр start_qa_salary",
									"console.log(\"response have to start_qa_salary == \",jsonData.start_qa_salary,typeof jsonData.start_qa_salary);",
									"pm.test(\"check the response have to start_qa_salary\", function() {",
									"    pm.expect(jsonData).to.have.property('start_qa_salary');",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_6_months",
									"console.log(\"response have to qa_salary_after_6_months == \",jsonData.qa_salary_after_6_months,typeof jsonData.qa_salary_after_6_months);",
									"pm.test(\"check the response have to qa_salary_after_6_months\", function() {",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_12_months",
									"console.log(\"response have to qa_salary_after_12_months == \",jsonData.qa_salary_after_12_months,typeof jsonData.qa_salary_after_12_months);",
									"pm.test(\"check the response have to qa_salary_after_12_months\", function() {",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
									"console.log(\"response have to qa_salary_after_1.5_year == \",jsonData.qa_salary_after_1_5_year,typeof jsonData.qa_salary_after_1_5_year);",
									"pm.test(\"check the response have to qa_salary_after_1.5_year\", function() {",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');",
									"});",
									"",
									"//Проверить, что json response имеет параметр qa_salary_after_3.5_years",
									"console.log(\"response have to qa_salary_after_3.5_year == \",jsonData.qa_salary_after_3_5_years,typeof jsonData.qa_salary_after_3_5_years);",
									"pm.test(\"check the response have to qa_salary_after_3.5_years\", function() {",
									"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');",
									"});",
									"",
									"//Проверить, что json response имеет параметр person",
									"console.log(\"response have to person == \",jsonData.person,typeof jsonData.person);",
									"pm.test(\"check the response have to person\", function() {",
									"    pm.expect(jsonData).to.have.property('person');",
									"});",
									"",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
									"pm.test(\"check the start_qa_salary = salary from request\",function(){",
									"    pm.expect(Number(jsonData.start_qa_salary)).to.eql(Number(req_body.salary));",
									"});",
									"",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
									"pm.test(\"check the qa_salary_after_6_months = salary*2\",function(){",
									"    pm.expect(Number(jsonData.qa_salary_after_6_months)).to.eql(Number(req_body.salary*2));",
									"});",
									"console.log(+jsonData.qa_salary_after_6_months, +req_body.salary*2);",
									"",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
									"pm.test(\"check the qa_salary_after_12_months = salary*2.7\",function(){",
									"    pm.expect(Number(jsonData.qa_salary_after_12_months )).to.eql(Number(req_body.salary*2.7));",
									"});",
									"console.log(+jsonData.qa_salary_after_12_months, +req_body.salary*2.7 );",
									"",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
									"pm.test(\"check the qa_salary_after_1.5_year = salary*3.3\",function(){",
									"    pm.expect(+jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req_body.salary*3.3);",
									"});",
									"console.log(+jsonData[\"qa_salary_after_1.5_year\"], +req_body.salary*3.3);",
									"",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
									"pm.test(\"check the qa_salary_after_3.5_years= salary*3.8\",function(){",
									"    pm.expect(+jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req_body.salary*3.8);",
									"});",
									"console.log(+jsonData[\"qa_salary_after_3.5_years\"],+req_body.salary*3.8);",
									"",
									"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
									"pm.test(\"check the 1 element from u_name = salary from request\",function(){",
									"    pm.expect(+jsonData.person.u_name[1]).to.eql(+req_body.salary);",
									"});",
									"console.log(+jsonData.person.u_name[1], +req_body.salary);",
									"",
									"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
									"pm.test(\"check the u_age = age from request\",function(){",
									"    pm.expect(+jsonData.person.u_age).to.eql(+req_body.age);",
									"});",
									"console.log(+jsonData.person.u_age, +req_body.age);",
									"",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
									"pm.test(\"check the u_salary_5_years = salary*4.2 from request\",function(){",
									"    pm.expect(+jsonData.person.u_salary_5_years).to.eql(+req_body.salary*4.2);",
									"});",
									"console.log(jsonData.person.u_salary_5_years, +req_body.salary*4.2);",
									"",
									"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
									"for (i in jsonData.person) {",
									"    console.log(i, jsonData.person[i]);",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_3",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData= pm.response.json();",
									"pm.environment.set(\"auth_token\", \"/s34lfgbj/None/jjd909/93862kjkWpqc1993None62317evny\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/login?login=mooncake&password=qwery",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							],
							"query": [
								{
									"key": "login",
									"value": "mooncake"
								},
								{
									"key": "password",
									"value": "qwery"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"",
									"//Проверка структуры json в ответе.",
									"var jsonData=pm.response.json();",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"person\",",
									"        \"qa_salary_after_12_months\",",
									"        \"qa_salary_after_6_months\",",
									"        \"start_qa_salary\"",
									"    ],",
									"    \"properties\": {",
									"        \"person\": {",
									"            \"type\": \"object\",",
									"            \"default\": {},",
									"            \"title\": \"The person Schema\",",
									"            \"required\": [",
									"                \"u_age\",",
									"                \"u_name\",",
									"                \"u_salary_1_5_year\"",
									"            ],",
									"            \"properties\": {",
									"                \"u_age\": {",
									"                    \"type\": \"integer\",",
									"                    \"default\": 0,",
									"                    \"title\": \"The u_age Schema\"",
									"                },",
									"                \"u_name\": {",
									"                    \"type\": \"array\",",
									"                    \"default\": [],",
									"                    \"title\": \"The u_name Schema\",",
									"                    \"items\": {",
									"                        \"anyOf\": [{",
									"                            \"type\": \"string\",",
									"                            \"default\": \"\",",
									"                            \"title\": \"A Schema\"",
									"                        },",
									"                        {",
									"                            \"type\": \"integer\",",
									"                            \"title\": \"A Schema\"",
									"                        }]",
									"                    }",
									"                },",
									"                \"u_salary_1_5_year\": {",
									"                    \"type\": \"integer\",",
									"                    \"default\": 0,",
									"                    \"title\": \"The u_salary_1_5_year Schema\"",
									"                }",
									"            }",
									"        },",
									"        \"qa_salary_after_12_months\": {",
									"            \"type\": \"number\",",
									"            \"default\": 0.0,",
									"            \"title\": \"The qa_salary_after_12_months Schema\"",
									"        },",
									"        \"qa_salary_after_6_months\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The qa_salary_after_6_months Schema\"",
									"        },",
									"        \"start_qa_salary\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The start_qa_salary Schema\"",
									"        }",
									"    }",
									"}",
									"pm.test(\"Schema is valid\", function() { ",
									"    pm.response.to.have.jsonSchema(schema); });",
									"",
									"console.log (jsonData)",
									"console.log (schema )",
									"",
									"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
									"var req_body = pm.request.body;",
									"var req = JSON.parse(req_body.raw);",
									"",
									"",
									"pm.test(\"Payroll check_qa_salary_after_6_months\", function(){",
									"    if (jsonData.qa_salary_after_6_months == jsonData.start_qa_salary*2){",
									"    console.log ('Result == TRUE');",
									"}",
									"else {",
									"    console.log ('Result == FALSE');",
									"}",
									"});",
									"",
									"pm.test(\"Payroll check_qa_salary_after_12_months\", function(){",
									"    if (jsonData.qa_salary_after_12_months == jsonData.start_qa_salary*2.9){",
									"    console.log ('Result == TRUE');",
									"}",
									"else {",
									"    console.log ('Result == FALSE');",
									"}",
									"});",
									"",
									"pm.test(\"Payroll check_qa_salary_after_12_months\", function(){",
									"    if (jsonData.person[\"u_salary_1_5_year\"] == jsonData.start_qa_salary*4){",
									"    console.log ('Result == TRUE');",
									"}",
									"else {",
									"    console.log ('Result == FALSE');",
									"}",
									"});",
									"",
									"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user",
									"console.log(jsonData.person[\"u_salary_1_5_year\"], typeof jsonData.person[\"u_salary_1_5_year\"]);",
									"pm.environment.set(\"salary\", jsonData.person[\"u_salary_1_5_year\"]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"age\":39,\n\"salary\":1000,\n\"name\":\"Julia\",\n\"auth_token\":\"{{auth_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"//Проверка структуры json в ответе.",
									"var jsonData=pm.response.json();",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"age\",",
									"        \"name\",",
									"        \"salary\"",
									"    ],",
									"    \"properties\": {",
									"        \"age\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The age Schema\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The name Schema\"",
									"        },",
									"        \"salary\": {",
									"            \"type\": \"array\",",
									"            \"default\": [],",
									"            \"title\": \"The salary Schema\",",
									"            \"items\": {",
									"                \"anyOf\": [{",
									"                    \"type\": \"integer\",",
									"                    \"default\": 0,",
									"                    \"title\": \"A Schema\"",
									"                },",
									"                {",
									"                    \"type\": \"string\",",
									"                    \"title\": \"A Schema\"",
									"                }]",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Schema is valid\", function() { ",
									"    pm.response.to.have.jsonSchema(schema); });",
									"",
									"console.log (jsonData)",
									"console.log (schema)",
									"",
									"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
									"pm.test(\"Payroll check_second coefficient\",function(){",
									"    if (jsonData.salary[1] == jsonData.salary[0]*2){",
									"    console.log ('Result == TRUE');",
									"}",
									"else {",
									"    console.log ('Result == FALSE');",
									"}",
									"});",
									"",
									"pm.test(\"Payroll check_third coefficient\", function(){",
									"    if (jsonData.salary[2] == jsonData.salary[0]*3){",
									"    console.log ('Result == TRUE');",
									"}",
									"else {",
									"    console.log ('Result == FALSE');",
									"}",
									"});",
									"",
									"//Проверить, что 2-й элемент массива salary больше 1-го и 0-го",
									"pm.test(\"Check that second coefficient > first coefficient\", function(){",
									"    pm.expect(Number(jsonData.salary[2])).to.greaterThan(Number(jsonData.salary[1]));",
									"});",
									"pm.test(\"Check that second coefficient > zero coefficient\", function(){",
									"    pm.expect(Number(jsonData.salary[2])).to.greaterThan(Number(jsonData.salary[0]));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Julia",
									"type": "text"
								},
								{
									"key": "age",
									"value": "39",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"//Проверка структуры json в ответе.",
									"var jsonData=pm.response.json();",
									"var req_body=request.data;",
									"",
									"var schema ={",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"age\",",
									"        \"daily_food\",",
									"        \"daily_sleep\",",
									"        \"name\"",
									"    ],",
									"    \"properties\": {",
									"        \"age\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The age Schema\"",
									"        },",
									"        \"daily_food\": {",
									"            \"type\": \"number\",",
									"            \"default\": 0.0,",
									"            \"title\": \"The daily_food Schema\"",
									"        },",
									"        \"daily_sleep\": {",
									"            \"type\": \"number\",",
									"            \"default\": 0.0,",
									"            \"title\": \"The daily_sleep Schema\"",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The name Schema\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Schema is valid\", function() { ",
									"    pm.response.to.have.jsonSchema(schema); });",
									"",
									"console.log (jsonData)",
									"console.log (schema)",
									"",
									"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
									"pm.test(\"verification of the correctness of the result of multiplication by a coefficient daily_food\",function(){",
									"    pm.expect(Number(jsonData.daily_food)).to.eql(Number(req_body.weight*0.012))",
									"});",
									"",
									"pm.test(\"verification of the correctness of the result of multiplication by a coefficient daily_sleep\",function(){",
									"    pm.expect(Number(jsonData.daily_sleep)).to.eql(Number(req_body.weight*2.5))",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "39",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "57",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Julia",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"//Проверка структуры json в ответе.",
									"var jsonData=pm.response.json();",
									"var req_body=request.data;",
									"",
									"var schema ={",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"age\",",
									"        \"family\",",
									"        \"name\",",
									"        \"salary\"",
									"    ],",
									"    \"properties\": {",
									"        \"age\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The age Schema\"",
									"        },",
									"        \"family\": {",
									"            \"type\": \"object\",",
									"            \"default\": {},",
									"            \"title\": \"The family Schema\",",
									"            \"required\": [",
									"                \"children\",",
									"                \"u_salary_1_5_year\"",
									"            ],",
									"            \"properties\": {",
									"                \"children\": {",
									"                    \"type\": \"array\",",
									"                    \"default\": [],",
									"                    \"title\": \"The children Schema\",",
									"                    \"items\": {",
									"                        \"type\": \"array\",",
									"                        \"title\": \"A Schema\",",
									"                        \"items\": {",
									"                            \"anyOf\": [{",
									"                                \"type\": \"string\",",
									"                                \"title\": \"A Schema\"",
									"                            },",
									"                            {",
									"                                \"type\": \"integer\",",
									"                                \"title\": \"A Schema\"",
									"                            }]",
									"                        }",
									"                    }",
									"                },",
									"                \"u_salary_1_5_year\": {",
									"                    \"type\": \"integer\",",
									"                    \"default\": 0,",
									"                    \"title\": \"The u_salary_1_5_year Schema\"",
									"                }",
									"            }",
									"        },",
									"        \"name\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The name Schema\"",
									"        },",
									"        \"salary\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The salary Schema\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Schema is valid\", function() { ",
									"    pm.response.to.have.jsonSchema(schema); });",
									"",
									"console.log (jsonData);",
									"console.log (schema);",
									"",
									"//Проверить что занчение поля name = значению переменной name из окружения",
									"pm.test(\"Check that name from response = name from environments\", function(){",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));",
									"});",
									"",
									"//Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age",
									"pm.test(\"Check that age from response = age from request\", function(){",
									"    pm.expect(jsonData.age).to.eql(req_body.age);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Можете взять любой объект из присланного списка, используйте js random.",
									"var jsonData=pm.response.json();",
									"var len=jsonData.length;",
									"",
									"// Получаем случайный объект массива",
									"var rand = Math.floor(Math.random() * len);",
									"console.log(jsonData[rand]);",
									"",
									"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
									"pm.environment.set(\"Cur_ID\", jsonData[rand].Cur_ID);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200",
									"//Проверка структуры json в ответе.",
									"var jsonData=pm.response.json();",
									"var schema ={",
									"    \"type\": \"object\",",
									"    \"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"Cur_Abbreviation\",",
									"        \"Cur_ID\",",
									"        \"Cur_Name\",",
									"        \"Cur_OfficialRate\",",
									"        \"Cur_Scale\",",
									"        \"Date\"",
									"    ],",
									"    \"properties\": {",
									"        \"Cur_Abbreviation\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The Cur_Abbreviation Schema\"",
									"        },",
									"        \"Cur_ID\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The Cur_ID Schema\"",
									"        },",
									"        \"Cur_Name\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The Cur_Name Schema\"",
									"        },",
									"        \"Cur_OfficialRate\": {",
									"            \"type\": \"number\",",
									"            \"default\": 0.0,",
									"            \"title\": \"The Cur_OfficialRate Schema\"",
									"        },",
									"        \"Cur_Scale\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The Cur_Scale Schema\"",
									"        },",
									"        \"Date\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The Date Schema\"",
									"        }",
									"    }",
									"}",
									"",
									"pm.test(\"Schema is valid\", function() { ",
									"    pm.response.to.have.jsonSchema(schema); });",
									"",
									"console.log (jsonData);",
									"console.log (schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				},
				{
					"name": "Additional Task***",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//получить список валют",
									"var jsonData=pm.response.json();",
									"",
									"var array_length= jsonData.length;",
									"var token= pm.environment.get(\"auth_token\");",
									"",
									"//итерировать список валют",
									"for ( let i= 0; i< array_length; i++){",
									"    //в каждой итерации отправлять запрос на сервер для получения курса каждой валюты",
									"    let postRequest= {",
									"        url: 'http://54.157.99.22:80/curr_byn',",
									"        method: 'POST',",
									"        header:{\"Content-Type\":\"application/json\"},",
									"        body:{",
									"            mode: 'formdata',",
									"            formdata: [",
									"                {key: 'auth_token', value: 'token'},",
									"                {key: 'curr_code', value: jsonData[i].Cur_ID}",
									"            ]",
									"        },",
									"    }",
									"    //если возвращается 500 код, переходим к следующей итреации",
									"    pm.sendRequest(postRequest,function(err,response){",
									"       if (response.code == 500){",
									"           console.log(err);",
									"       }",
									"       //если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"",
									"       else if (response.code == 200){",
									"           pm.test(\"Cur_OfficialRate existing\", function(){",
									"               pm.expect(response.json()).to.have.property('Cur_OfficialRate');",
									"           });",
									"           if (pm.expect(response.json()).to.have.property('Cur_OfficialRate')){",
									"               //если поле есть, пишем в консоль инфу про фалюту в виде response",
									"               console.log(response.json());",
									"           }",
									"       }",
									"    }); //переходим к следующей итерации",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Strip JSON Comments",
					"if (pm?.request?.body?.options?.raw?.language === 'json') {",
					"    const rawData = pm.request.body.toString();",
					"    const strippedData = rawData.replace(",
					"        /\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g,",
					"        (m, g) => g ? \"\" : m",
					"    );",
					"    pm.request.body.update(JSON.stringify(JSON.parse(strippedData)));",
					"}",
					"",
					"",
					"",
					"",
					"pm.test(\"Status code is 200\", function() {",
					"pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}